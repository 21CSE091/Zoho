Write a program to calculate the checksum-digit of a number. It is calculated as follows:

● Calculate the position of digits. Rightmost position starts at 0, Eg: in 1234, 1 is 3rd digit, 4 is 0th digit.

● Double the digits at even positions only and subtract 9 if the result is >=10, so that it becomes a single digit. Eg: 8 will become 7, as 8*2 = 16 => 1+6 = 7. (which is also, 16-9)

● Sum all the digits (after previous step) and if the result is a multiple of 10, checksum digit will be 0. Otherwise, checksum digit is the number required to make the sum a multiple of 10.

Input Format

One line of one integer value only.

Constraints

0

Output Format

One digit that is the checksum digit of the given value.

Sample Input 0

13
Sample Output 0

3
Explanation 0

Positons of digits: 1=1 & 3= 0; Double only even positions, which gives sum of digits = 1 + (3*2) = 7. If we add 3, it becomes multiple of 10. So, result is 3.


Program:
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'solution' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING n as parameter.
     */

    public static int solution(String n) {
    // Your logic goes here

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String n = bufferedReader.readLine();

        int result = Result.solution(n);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
